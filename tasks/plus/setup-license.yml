---
- name: (Alpine Linux) Set up NGINX Plus license
  when: ansible_facts['os_family'] == "Alpine"
  block:
    - name: Install cryptography package
      ansible.builtin.package:
        name: py3-cryptography

    - name: (Alpine Linux) Create APK directory
      ansible.builtin.file:
        path: /etc/apk
        state: directory
        mode: "0755"

    - name: (Alpine Linux) Copy NGINX Plus certificate
      ansible.builtin.copy:
        src: "{{ nginx_license['certificate'] }}"
        dest: /etc/apk/cert.pem
        decrypt: true
        mode: "0444"

    - name: (Alpine Linux) Copy NGINX Plus key
      ansible.builtin.copy:
        src: "{{ nginx_license['key'] }}"
        dest: /etc/apk/cert.key
        decrypt: true
        mode: "0444"

    - name: (Alpine Linux) Check that NGINX Plus certificate is valid
      community.crypto.x509_certificate_info:
        path: /etc/apk/cert.pem
      register: cert

    - name: (Alpine Linux) Check that NGINX Plus key is valid
      community.crypto.openssl_privatekey_info:
        path: /etc/apk/cert.key
      register: key

    - name: (Alpine Linux) Check that NGINX Plus license is valid
      ansible.builtin.assert:
        that:
          - cert['expired'] == false
          - cert['public_key'] == key['public_key']
        success_msg: Your NGINX Plus license is valid!
        fail_msg: Something went wrong! Make sure your NGINX Plus license is valid!

- name: (Debian/Red Hat/SLES OSs) Set up NGINX Plus license
  when: ansible_facts['os_family'] != 'Alpine'
  block:
    - name: (RedHat) Install pip
      ansible.builtin.include_tasks: "{{ role_path }}/tasks/plus/install-pip{{ ansible_python['version']['major'] }}.yml"

    - name: (Debian/Red Hat/SLES OSs) Create SSL directory
      ansible.builtin.file:
        path: /etc/ssl/nginx
        state: directory
        mode: "0755"

    - name: (Debian/Red Hat/SLES OSs) Copy NGINX Plus certificate and license key
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/ssl/nginx
        decrypt: true
        mode: "0444"
      loop:
        - "{{ nginx_license['certificate'] }}"
        - "{{ nginx_license['key'] }}"

    - name: (Debian/Red Hat/SLES OSs) Install cryptography package
      ansible.builtin.pip:
        name: cryptography
      when: not (ansible_facts['distribution'] == "OracleLinux" and ansible_facts['distribution_major_version'] == "8")

    - name: (OracleLinux 8) Install cryptography package
      ansible.builtin.package:
        name: "python3.11-cryptography"
      when:
        - ansible_facts['distribution'] == "OracleLinux"
        - ansible_facts['distribution_major_version'] == "8"

    - name: (Debian/Red Hat/SLES OSs) Check that NGINX Plus certificate is valid
      community.crypto.x509_certificate_info:
        path: /etc/ssl/nginx/nginx-repo.crt
      register: cert

    - name: (Debian/Red Hat/SLES OSs) Check that NGINX Plus key is valid
      community.crypto.openssl_privatekey_info:
        path: /etc/ssl/nginx/nginx-repo.key
      register: key

    - name: (Debian/Red Hat/SLES OSs) Check that NGINX Plus license is valid
      ansible.builtin.assert:
        that:
          - cert['expired'] == false
          - cert['public_key'] == key['public_key']
        success_msg: Your NGINX Plus license is valid!
        fail_msg: Something went wrong! Make sure your NGINX Plus license is valid!

    - name: (SLES) Create NGINX Plus license bundle
      when: ansible_facts['os_family'] == 'Suse'
      block:
        - name: (SLES) Check combined NGINX Plus license bundle exists
          ansible.builtin.stat:
            path: /etc/ssl/nginx/nginx-repo-bundle.crt
          register: bundle

        - name: (SLES) Combine NGINX Plus certificate and license key
          ansible.builtin.assemble:
            src: /etc/ssl/nginx
            dest: /etc/ssl/nginx/nginx-repo-bundle.crt
            mode: "0444"
          when: not bundle['stat']['exists']

- name: Set up NGINX Plus JWT
  block:
    - name: Check if NGINX Plus is being installed or upgraded
      ansible.builtin.package_facts:

    - name: Obtain version of NGINX Plus if it's already installed
      when: "'nginx-plus' in ansible_facts['packages']"
      block:
        - name: Check NGINX Plus version
          ansible.builtin.command: nginx -v
          register: nginx_plus_version
          changed_when: false

        - name: Parse NGINX Plus version
          ansible.builtin.set_fact:
            nginx_plus_installed_version: "{{ nginx_plus_version['stderr'] | regex_search('nginx-plus-r(\\d+)', '\\1') | first }}"

    - name: Obtain version of NGINX Plus to be installed (if set)
      ansible.builtin.set_fact:
        nginx_plus_target_version: "{{ nginx_version | regex_search('(\\d+)', '\\1') | first }}"
      when: nginx_version is defined

    - name: Set up JWT
      when:
        - nginx_setup in ['install', 'upgrade']
        - nginx_plus_installed_version is defined and (nginx_setup == 'upgrade' or nginx_plus_target_version is defined and nginx_plus_target_version is version('33', '>='))
          or nginx_plus_installed_version is not defined and (nginx_plus_target_version is not defined or nginx_plus_target_version is version('33', '>='))
      block:
        - name: Create NGINX Plus main directory
          ansible.builtin.file:
            path: /etc/nginx
            state: directory
            mode: "0755"

        - name: Copy NGINX Plus JWT
          ansible.builtin.copy:
            src: "{{ nginx_license['jwt']['src'] | default(nginx_license['jwt']) }}"
            dest: "{{ nginx_license['jwt']['dest'] | default((ansible_facts['os_family'] == 'FreeBSD') | ternary('/usr/local/etc/nginx/license.jwt', '/etc/nginx/license.jwt')) }}"
            decrypt: true
            mode: "0444"

        - name: Verify NGINX Plus JWT claims
          block:
            - name: Read JWT file
              ansible.builtin.slurp:
                src: "{{ nginx_license['jwt']['dest'] | default((ansible_facts['os_family'] == 'FreeBSD') | ternary('/usr/local/etc/nginx/license.jwt', '/etc/nginx/license.jwt')) }}"
              register: jwt_file

            - name: Decode JWT payload using base64url
              ansible.builtin.set_fact:
                jwt_payload_encoded: "{{ (jwt_file['content'] | b64decode | split('.'))[1] }}"

            - name: Decode JWT payload using base64url
              ansible.builtin.set_fact:
                jwt_payload: >-
                  {{
                    jwt_payload_encoded
                    | regex_replace('-', '+')
                    | regex_replace('_', '/')
                    | regex_replace('\s*$', '=' * (4 - jwt_payload_encoded | length % 4))
                    | b64decode
                    | from_json
                  }}

            - name: Assert JWT payload 'iss', 'aud', 'iat', and 'f5_sat' claims
              ansible.builtin.assert:
                that:
                  - jwt_payload['iss'] == 'F5 Inc.'
                  - jwt_payload['aud'] == 'urn:f5:teem'
                  - (ansible_facts['date_time']['epoch'] | int) >= jwt_payload['iat']
                  - (ansible_facts['date_time']['epoch'] | int) <= jwt_payload['f5_sat']
                success_msg: Your NGINX Plus license JWT is valid!
                fail_msg: Something went wrong! Make sure your NGINX Plus license JWT is valid!
